name: RAG System CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test-rag-system:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env

    - name: Validate environment
      run: |
        echo "Validating environment setup..."
        python -c "import openai, langchain, chromadb; print('All dependencies imported successfully')"

    - name: Run RAG system tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Testing RAG system..."
        python RETO_RAG.py

    - name: Check output files
      run: |
        echo "Checking generated files..."
        if [ -f "rag_results.json" ]; then
          echo "✅ Results file generated successfully"
          ls -la rag_results.json
        else
          echo "❌ Results file not found"
          exit 1
        fi
        
        if [ -d "chroma_db" ]; then
          echo "✅ Vector database created successfully"
          ls -la chroma_db/
        else
          echo "❌ Vector database not found"
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rag-outputs
        path: |
          rag_results.json
          sample_docs/
        retention-days: 7

    - name: Validate JSON output
      run: |
        echo "Validating JSON results..."
        python -c "
        import json
        with open('rag_results.json', 'r') as f:
            data = json.load(f)
        print(f'Successfully processed {len(data)} queries')
        for i, result in enumerate(data):
            if 'error' in result:
                print(f'❌ Query {i+1} failed: {result[\"answer\"]}')
            else:
                print(f'✅ Query {i+1}: {result[\"question\"][:50]}...')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test-rag-system

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for hardcoded secrets
      run: |
        echo "Scanning for hardcoded secrets..."
        if grep -r "sk-" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml"; then
          echo "❌ Potential API keys found in code"
          exit 1
        else
          echo "✅ No hardcoded secrets detected"
        fi

    - name: Check code quality
      run: |
        echo "Running basic code quality checks..."
        python -m py_compile *.py
        echo "✅ Python syntax validation passed"

  performance-test:
    runs-on: ubuntu-latest
    needs: test-rag-system
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler psutil

    - name: Run performance test
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Running performance test..."
        python -c "
        import time
        import psutil
        import os
        
        # Import after setting env
        os.environ['OPENAI_API_KEY'] = '${{ secrets.OPENAI_API_KEY }}'
        
        start_time = time.time()
        start_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
        
        # Run a quick RAG test
        from RETO_RAG import RAGSystem, create_sample_documents
        
        rag = RAGSystem()
        docs = create_sample_documents()
        
        end_time = time.time()
        end_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
        
        print(f'⏱️ Execution time: {end_time - start_time:.2f} seconds')
        print(f'💾 Memory usage: {end_memory - start_memory:.2f} MB')
        
        if end_time - start_time > 300:  # 5 minutes
            print('❌ Performance test failed: execution too slow')
            exit(1)
        else:
            print('✅ Performance test passed')
        "name: RAG System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-rag-system:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env

    - name: Validate environment
      run: |
        echo "Validating environment setup..."
        python -c "import openai, langchain, chromadb; print('All dependencies imported successfully')"

    - name: Run RAG system tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Testing RAG system..."
        python RETO_RAG.py

    - name: Check output files
      run: |
        echo "Checking generated files..."
        if [ -f "rag_results.json" ]; then
          echo "✅ Results file generated successfully"
          ls -la rag_results.json
        else
          echo "❌ Results file not found"
          exit 1
        fi
        
        if [ -d "chroma_db" ]; then
          echo "✅ Vector database created successfully"
          ls -la chroma_db/
        else
          echo "❌ Vector database not found"
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: rag-outputs
        path: |
          rag_results.json
          sample_docs/
        retention-days: 7

    - name: Validate JSON output
      run: |
        echo "Validating JSON results..."
        python -c "
        import json
        with open('rag_results.json', 'r') as f:
            data = json.load(f)
        print(f'Successfully processed {len(data)} queries')
        for i, result in enumerate(data):
            if 'error' in result:
                print(f'❌ Query {i+1} failed: {result[\"answer\"]}')
            else:
                print(f'✅ Query {i+1}: {result[\"question\"][:50]}...')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test-rag-system

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      continue-on-error: true
      with:
        sarif-file: 'security-scan.sarif'

    - name: Check for hardcoded secrets
      run: |
        echo "Scanning for hardcoded secrets..."
        if grep -r "sk-" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml"; then
          echo "❌ Potential API keys found in code"
          exit 1
        else
          echo "✅ No hardcoded secrets detected"
        fi

  performance-test:
    runs-on: ubuntu-latest
    needs: test-rag-system
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler psutil

    - name: Run performance test
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Running performance test..."
        python -c "
        import time
        import psutil
        import os
        
        # Import after setting env
        os.environ['OPENAI_API_KEY'] = '${{ secrets.OPENAI_API_KEY }}'
        
        start_time = time.time()
        start_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
        
        # Run a quick RAG test
        from RETO_RAG import RAGSystem, create_sample_documents
        
        rag = RAGSystem()
        docs = create_sample_documents()
        
        end_time = time.time()
        end_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
        
        print(f'⏱️ Execution time: {end_time - start_time:.2f} seconds')
        print(f'💾 Memory usage: {end_memory - start_memory:.2f} MB')
        
        if end_time - start_time > 300:  # 5 minutes
            print('❌ Performance test failed: execution too slow')
            exit(1)
        else:
            print('✅ Performance test passed')
        "